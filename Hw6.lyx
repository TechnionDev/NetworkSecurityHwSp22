#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage{xcolor}
\pagecolor[rgb]{0.15,0.15,0.15} %black
\color[rgb]{1,1,1} %grey

\newfontfamily\mylistingsfont{Noto Mono for Powerline}
\definecolor{lbcolor}{rgb}{0.3,0.3,0.3}  
\definecolor{lkwcolor}{rgb}{0.7,0.7,0.9}  
\end_preamble
\use_default_options true
\begin_removed_modules
theorems-ams
\end_removed_modules
\begin_modules
eqs-within-sections
figs-within-sections
linguistics
theorems-bytype
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Arial"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\mylistingsfont},language={C++},backgroundcolor={\color{lbcolor}},showstringspaces=false,xleftmargin=5mm,aboveskip=0pt,belowskip=0pt,keywordstyle={\bfseries\color{lkwcolor}},morekeywords={include, printf}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Network Security Hw6
\end_layout

\begin_layout Author
Gur Telem 206631848
\end_layout

\begin_layout Section
SSL
\end_layout

\begin_layout Subsection
Does comply with PFS?
\end_layout

\begin_layout Standard

\series bold
The protocol does comply with PFS.
\end_layout

\begin_layout Standard
The long term password is 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pass
\end_layout

\end_inset

 (the one the student and the server agreed on).
\end_layout

\begin_layout Standard
And the short term password is calculated from the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

client_random
\end_layout

\end_inset

, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

server_random
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pre_master_secret
\end_layout

\end_inset

 (which creates the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

master_secret
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
Since the DH keys are random each time, meaning that leaked DH won't leak
 previous 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pre_master_secret
\end_layout

\end_inset

 which is required to calculate the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

master_secret
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Since the short term password of one session doesn't compromise other short
 term password, the protocol complies with PFS.
\end_layout

\begin_layout Standard
If 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pass
\end_layout

\end_inset

 is leaked, it still won't help because the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pass
\end_layout

\end_inset

 is only used to 
\begin_inset Quotes eld
\end_inset

trust
\begin_inset Quotes erd
\end_inset

 the agreed upon 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

master_secret
\end_layout

\end_inset

 and it doesn't play a part in its calculation.
 Meaning that while it may help initiated a new session, imitating a legitimate
 user, it won't compromise data transferred in previous connections.
\end_layout

\begin_layout Subsection
Is the protocol secured?
\end_layout

\begin_layout Standard

\series bold
The protocol is secured.
\end_layout

\begin_layout Standard
For an attacker to be able to pretend to be a client they need to know a
 pair of 
\begin_inset Formula $y$
\end_inset

 and the corresponding 
\begin_inset Formula $E_{f\left(pass\right)}\left(g^{y}\mod p\right)$
\end_inset

.
 The former is to be able to use the DH key to send a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pre_master_secret
\end_layout

\end_inset

 that is visible for the attacker, and the latter is so the server would
 trust the client.
\end_layout

\begin_layout Standard
Since the attacker doesn't know what 
\begin_inset Formula $f\left(pass\right)$
\end_inset

 is, they can't just calculate such a pair for a random 
\begin_inset Formula $y$
\end_inset

.
\end_layout

\begin_layout Standard
Unless 
\begin_inset Formula $f\left(pass\right)$
\end_inset

 is leaked (aka password equivalent), the attacker is pretty helpless (even
 offline brute-force attack wouldn't help much because there are two unknown
 parameters that we need to guess to be able to recognize a good pair: a
 pair with the latter previously used).
\end_layout

\begin_layout Standard
Thus an attacker is unable to impersonate a legitimate client.
\end_layout

\begin_layout Standard
The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pre_master_secret
\end_layout

\end_inset

 isn't visible to the attacker as we previously mentioned, thus the attacker
 is unable to produce a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

master_secret
\end_layout

\end_inset

 that will be able to decrypt traffic.
\end_layout

\begin_layout Subsection
Is the SDL resilient to dictionary attack by a passive attacker?
\end_layout

\begin_layout Standard
Yes.
\end_layout

\begin_layout Standard
As explained in the previous section, we have two unknown parameters that
 we need to 
\begin_inset Quotes eld
\end_inset

guess
\begin_inset Quotes erd
\end_inset

.
 One of which is pseudo random and won't appear in a dictionary (hashed
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pass
\end_layout

\end_inset

 and 
\begin_inset Formula $y$
\end_inset

).
 The second is a hashed password.
 And even if we found a pair for which we got a previously seen 
\begin_inset Formula $E_{f\left(pass\right)}\left(g^{y}\mod p\right)$
\end_inset

, we still don't know if it's an accidental pair or if the 
\begin_inset Formula $f\left(pass\right)$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 are actually the same one used to calculate the forementioned value.
\end_layout

\begin_layout Standard
Meaning that since we don't have a value that is solely dependent on 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pass
\end_layout

\end_inset

, we can't use a dictionary attack.
\end_layout

\begin_layout Subsection
Is the SDL resilient to dictionary attack by an active attacker?
\end_layout

\begin_layout Standard
The protocol is susceptible to a dictionary attack by an active attacker.
\end_layout

\begin_layout Standard
An active attacker can impersonate a server:
\end_layout

\begin_layout Enumerate
Wait for a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ClientHello
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Return a 
\begin_inset Formula $g^{x}\mod p$
\end_inset

 s.t.
 the 
\begin_inset Formula $x$
\end_inset

 is known to him (along with 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

server_random
\end_layout

\end_inset

 that we also need to remember)
\end_layout

\begin_layout Enumerate
Get 
\begin_inset Formula $E_{f\left(pass\right)}\left(g^{y}\mod p\right)$
\end_inset

 and 
\begin_inset Formula $E_{k}\left(\text{pre\_master\_sercert}\right)$
\end_inset

 from the client
\end_layout

\begin_layout Enumerate
Get the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

FinishedClient
\end_layout

\end_inset

 message from the client
\end_layout

\begin_layout Standard
Now for the dictionary attack:
\end_layout

\begin_layout Enumerate
For each 
\begin_inset Formula $pass$
\end_inset

 in the dictionary:
\end_layout

\begin_deeper
\begin_layout Enumerate
Calculate 
\begin_inset Formula $f\left(pass\right)$
\end_inset

 (since 
\begin_inset Formula $f$
\end_inset

 itself isn't a secret)
\end_layout

\begin_layout Enumerate
Decrypt 
\begin_inset Formula $E_{f\left(pass\right)}\left(g^{y}\mod p\right)$
\end_inset

 using 
\begin_inset Formula $f\left(pass\right)$
\end_inset


\end_layout

\begin_layout Enumerate
Calculate 
\begin_inset Formula $g^{yx}\mod p$
\end_inset

 using the value from the previous section and the random 
\begin_inset Formula $x$
\end_inset

 we chose after getting 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ClientHello
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Use 
\begin_inset Formula $g^{yx}\mod p$
\end_inset

 to decrypt 
\begin_inset Formula $E_{k}\left(\text{pre\_master\_sercert}\right)$
\end_inset


\end_layout

\begin_layout Enumerate
Calculate 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

master_secret
\end_layout

\end_inset

 using the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pre_master_sercert
\end_layout

\end_inset

 that we calculated and the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

*_random
\end_layout

\end_inset

s that were easily visible
\end_layout

\begin_layout Enumerate
Try to decrypt the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

FinishedClient
\end_layout

\end_inset

 which is already protected by the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

master_secret
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
If we got a valid message, then we found the password.
\end_layout

\end_deeper
\begin_layout Standard
The difference here is that we could know the 
\begin_inset Formula $x$
\end_inset

 and thus we had a value in hand which is solely dependent on 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pass
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Is the modified protocol resilient to dictionary attack by an active attacker?
\end_layout

\begin_layout Standard
In this case a dictionary attack (an offline one) wouldn't work since we
 don't have a value to confirm our guess against.
\end_layout

\begin_layout Standard
Since the client would probably give up after a few failed attempts, we
 wouldn't be able to do a proper online dictionary attack as neither the
 client, nor the server would agree to talk to as for long enough.
\end_layout

\begin_layout Section
IKE
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
A
\end_layout

\end_inset

Doesn't retain IKE's security
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
B
\end_layout

\end_inset

Retains security ; Doesn't reduce the amount of exchanged data
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 Retains security ; Reduces amount of exchanged data
\end_layout

\begin_layout Subsection
The cookie will be a single bit.
\end_layout

\begin_layout Standard
A.
\end_layout

\begin_layout Standard
Security isn't retained as one of the purposes of the cookie is to prevent
 DoS attacks that use IP spoofing by preventing doing the expensive operation
 which is calculating the exponent in the DH.
\end_layout

\begin_layout Standard
An attacker would be able to DoS attack a responder by sending a lot of
 messages with interchangeably 
\begin_inset Formula $0$
\end_inset

 and 
\begin_inset Formula $1$
\end_inset

 as cookies.
 The responder will ignore the incorrect cookie value but for the correct
 one it will continue to the next step which is the exponent for the DH.
 The attacker would be able to spoof his IP as he doesn't need the actual
 response from the responder (they simply send two packets, one for each
 possible cookie).
\end_layout

\begin_layout Subsection
Don't send cookie in Aggressive Mode.
\end_layout

\begin_layout Standard
C.
\end_layout

\begin_layout Standard
In aggressive mode, the server doesn't verify there isn't a DoS attack using
 the cookie.
\end_layout

\begin_layout Standard
Since the protocol doesn't need to handle the case of overlapping sessions,
 then the cookie has no purpose left for it and it can be eaten away (bad
 pun intended).
\end_layout

\begin_layout Subsection
Using 
\begin_inset Formula $0$
\end_inset

 instead of sending 
\begin_inset Formula $M_{ID}$
\end_inset

 in Quick Mode.
\end_layout

\begin_layout Standard
C.
\end_layout

\begin_layout Standard
The purpose of 
\begin_inset Formula $M_{ID}$
\end_inset

 is to identify an activation of Quick Mode (as the IKE protocol doesn't
 use TCP and thus doesn't have a 
\begin_inset Quotes eld
\end_inset

session
\begin_inset Quotes erd
\end_inset

 per se).
 Since we don't need to support concurrent activations (no concurrent sessions),
 we don't need it.
\end_layout

\begin_layout Standard
Thus it doesn't hurt the security and obviously it's one less piece of data
 being exchanged.
\end_layout

\begin_layout Subsection
Double hashing
\end_layout

\begin_layout Standard
B.
\end_layout

\begin_layout Standard
The length of the result of 
\begin_inset Formula $PRF_{SKEYID}\left(x\right)$
\end_inset

 is always the same, regardless of the 
\begin_inset Formula $x$
\end_inset

.
 Meaning that the amount of exchanged data isn't changed.
\end_layout

\begin_layout Standard
Since the result of a double hash is as difficult to guess as a single one
 (or more, since an attacker needs to hash twice for each try), it doesn't
 hurt the security of the protocol.
\end_layout

\begin_layout Standard
The purpose of the hashes is to prevent an attacker from replacing the algorithm
s specified with weaker ones.
 And as mentioned above, that purpose is still being held.
\end_layout

\begin_layout Section
Wireless
\end_layout

\end_body
\end_document
