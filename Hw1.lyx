#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage{xcolor}
\pagecolor[rgb]{0.15,0.15,0.15} %black
\color[rgb]{1,1,1} %grey

\newfontfamily\mylistingsfont{Noto Mono for Powerline}
\definecolor{lbcolor}{rgb}{0.3,0.3,0.3}  
\definecolor{lkwcolor}{rgb}{0.7,0.7,0.9}  
\end_preamble
\use_default_options true
\begin_removed_modules
theorems-ams
\end_removed_modules
\begin_modules
eqs-within-sections
figs-within-sections
linguistics
theorems-bytype
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Arial"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\mylistingsfont},language={C++},backgroundcolor={\color{lbcolor}},showstringspaces=false,xleftmargin=5mm,aboveskip=0pt,belowskip=0pt,keywordstyle={\bfseries\color{lkwcolor}},morekeywords={include, printf}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Network Security Hw1
\end_layout

\begin_layout Author
Gur Telem 206631848
\end_layout

\begin_layout Section
Attacks on networks and malicious software
\end_layout

\begin_layout Subsection
ARP spoofing
\end_layout

\begin_layout Subsubsection
What is ARP spoofing
\end_layout

\begin_layout Standard
An ARP spoofing attack is a type of attack where an attacker repeatedly
 identifies as a different computer on the network and thus causes a false
 linking between the victim computer's IP and the attacker's MAC address
 on other devices on the network.
 Then, whenever a device on the network wants to send a message to the victim's
 computer, it will reach the attacker instead (because communication in
 the LAN is done by MAC addresses).
\end_layout

\begin_layout Subsubsection
What can an attacker get from such an attack
\end_layout

\begin_layout Standard
By using such an attack, an attacker can receive sensitive information.
 For example, if an attacker pretends to be an authentication server on
 the LAN, it will receive all of the authentication messages sent by clients
 and by that will be able to collect login details.
 The attacker can even forward the requests from the clients to the real
 destination endpoint and such they will effectively be doing a mitm attack.
\end_layout

\begin_layout Subsubsection
How can an attacker answer first
\end_layout

\begin_layout Standard
Assuming an attacker knows which computers are going to send an ARP request,
 they can repeatedly start sending the response (identifying as the victim)
 before they even receive the request and by that, they will most likely
 be able to answer before even the legitimate computer (victim) will even
 receive the request to identify.
\end_layout

\begin_layout Subsubsection
Suggest a way to protect against an ARP attack
\end_layout

\begin_layout Standard

\series bold
Good suggestion:
\end_layout

\begin_layout Standard
The simplest way to block such an attack is to only allow automatic IP assignmen
t by the DHCP server and then to set all the routing devices on the network
 to block any ARP responses with mismatching MAC/IP combination.
 If an endpoint requires a static IP address, it should be set in the DHCP
 server to always reserve that IP for the endpoint's MAC address.
\end_layout

\begin_layout Standard

\series bold
A not very good suggestion:
\end_layout

\begin_layout Standard
If we want to allow self assigned static IP for endpoints we can still partially
 protect from ARP attacks by caching on routing devices (routers, switches,
 etc...) the ARP requests and if they get an ARP response message that doesn't
 match any request in the cache, they will block the packet.
\end_layout

\begin_layout Standard
This will not prevent an attacker from impersonating a victim located far
 away from the endpoint that sent the ARP msg (which will make it more likely
 the attacker will answer first as they are closer).
\end_layout

\begin_layout Subsection
Why should users install security updates ASAP
\end_layout

\begin_layout Standard
Users should install security patches and updates ASAP because when a patch
 is issued, then it's a bonfire for attackers to exploit the issue and start
 developing malicious attacks based on the breach.
 Announced vulnerabilities are called a one-days (zero-days are exploits
 not publicly announced or known, and most times unpatched too).
\end_layout

\begin_layout Standard
An example for this is the Blaster worm (Chinese researchers RE the security
 patch and created the worm).
\end_layout

\begin_layout Subsection
Student in MIT in 1988 (Nov 3rd) had his computer crashing every few minutes
\end_layout

\begin_layout Subsubsection
Why did the computer crash that day
\end_layout

\begin_layout Standard
The computer crashed because that day there was a worm running on the network
 (written by Robert Tappan Morris) that had a problem that caused the computers
 on the network to exponentially fill up with processes of itself and crash
 them.
\end_layout

\begin_layout Subsubsection
Why did it take a few minutes after restart to crash
\end_layout

\begin_layout Standard
The worm didn't save any files on the disk (or rather it deleted them after
 loading everything to memory).
 So it had no persistency after a reboot of the machine.
 But the exploit still existed on the network so the student's computer
 got infected again.
 The bug that caused exponentially increasing number of instances of the
 worm to run on the machine, until the process table filled and the computer
 crashed (there was a 1 to 7 chance that the worm would not kill itself
 even if there's a duplicate of itself).
 The process took a few minutes.
\end_layout

\begin_layout Subsubsection
Suggest a simple way for the student to prevent his computer from crashing
 until he finishes the assignment
\end_layout

\begin_layout Standard
Since the worm relied on re-infections after restart, the user could disconnect
 the internet, restart (to make sure it wasn't infected already), and then
 not re-connect the internet until the assignment is done.
\end_layout

\begin_layout Subsection
Buffer Overflow questions
\end_layout

\begin_layout Subsubsection
What is BOF and how can a worm use it
\end_layout

\begin_layout Standard
BOF (buffer overflow) is an vulnerability that allows more data to be written
 to a buffer than the buffer can hold and by that, overwriting the memory
 adjacent to the buffer (that contains other information, such as the return
 address from the function).
\end_layout

\begin_layout Standard
The worm can use the BOF vulnerability by replacing the return address of
 the function by the address to a function that the worm write (to the buffer
 for example).
 The worm's code can be written to the buffer and the return address is
 replaced with the address of the buffer.
 Then, when the function reaches the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

ret
\end_layout

\end_inset

 instruction, it will 
\begin_inset Quotes eld
\end_inset

return
\begin_inset Quotes erd
\end_inset

 (jump) to the address of the buffer and start reading it as instruction
 to execute.
 This kind of exploit is called arbitrary code execution.
\end_layout

\begin_layout Subsubsection
Give two examples for worms that used BOF
\end_layout

\begin_layout Enumerate
The worm from section 3 at MIT in 1988 that exploited a BOF in the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

finderd
\end_layout

\end_inset

 daemon.
\end_layout

\begin_layout Enumerate
A second example would be the worm Blaster which used BOF in the RPC functionali
ty which was patched in MS03-026
\end_layout

\begin_layout Subsubsection
Choose one example and explain how it used BOF (Blaster)
\end_layout

\begin_layout Standard
The RPC service was used port 445 which was open by default on every computer.
 In combination with a BOF vulnerability and the lack of mitigation on which
 code can be executed (today, code on the stack is set to RW but not E),
 it was able to write the execution code to the buffer and using the BOF
 to overwrite the ret address such that the it would point to the written
 code in the buffer.
\end_layout

\begin_layout Subsection
What could be 
\begin_inset Quotes eld
\end_inset

fixed
\begin_inset Quotes erd
\end_inset

 in the worm s.t.
 only one instance (on average) will be running on each infected PC?
\end_layout

\begin_layout Standard
The worm could remove the 
\begin_inset Quotes eld
\end_inset

feature
\begin_inset Quotes erd
\end_inset

 that even if another instance is detected, one in 
\begin_inset Formula $7$
\end_inset

 times, none of them will terminate.
\end_layout

\begin_layout Standard
If we want to protect against falsified signals that another instance exists
 the worm can hold a symmetric encryption key (will be identical in all
 copies) or even simply a salt (for hashing).
 The worm will send a random number and ask the other potential instance
 to encrypt/hash that number, and if the result is correct, it will start
 negotiating which one will terminate.
 To prevent someone extracting the key/salt, we can use a custom packet
 to make reverse engineering of the process nearly impossible (at least
 impractical).
\end_layout

\begin_layout Subsection
What is a syn attack, how is it done, what resource does it fill, and what
 is the purpose of that attack?
\end_layout

\begin_layout Standard
A syn attack is an attack where an attacker sends a lot of syn requests
 which will require the victim to allocate resources to initiate the connection.
\end_layout

\begin_layout Standard
The sender will usually change the src IP (IP spoofing) to prevent detection
 as well as prevent identification of a syn request as malicious.
\end_layout

\begin_layout Standard
After sending the initial syn request, the attacker would not send any ack
 messages and thus force the victim to hold resources until it times out.
\end_layout

\begin_layout Standard
The syn attack fill the connections queue and does prevents the victim from
 creating connections with other endpoints (DoS attack).
\end_layout

\begin_layout Standard
With a combination of a botnet we can DDoS a server with a syn attack and
 make it inaccessible for almost all users (statistically inaccessible).
\end_layout

\begin_layout Section
TCP/IP
\end_layout

\begin_layout Subsection
What is the layers model described in the lecture
\end_layout

\begin_layout Standard
There are 
\begin_inset Formula $5$
\end_inset

 layer, each with its own role (some protocols don't use all the layers
 and may use only the lower level layers):
\end_layout

\begin_layout Enumerate
Application layer - The layer that contains the actual data the application
 needs (protocols in this layer: FTP, HTTP, etc)
\end_layout

\begin_layout Enumerate
Transport layer - Will split (and merge at the destination) packets.
 When all the fragments are received, it will pass it back to the application
 layer (protocols in this layer TCP, UDP, etc).
\end_layout

\begin_layout Enumerate
Network layer - Responsible of routing packets to the correct destination.
 
\end_layout

\begin_layout Enumerate
Link layer - Responsible of sending packets between devices physically connected
 with a cable (with no other devices between them).
 
\end_layout

\begin_layout Enumerate
Physical layer - The actual physical signals being sent (optical signal,
 electronics signals, radio, etc....).
 Handles the signals and converts them into bits and bytes.
\end_layout

\begin_layout Subsection
Write Python 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

client.py
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Screenshot of execution result:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename q2.2Result.png
	scale 24

\end_inset


\end_layout

\begin_layout Subsection
Write Python 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

server.py
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Screenshot of execution result:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename q2.3.png
	scale 20

\end_inset


\end_layout

\begin_layout Subsection
Run 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

client.py
\end_layout

\end_inset

 on a running 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

server.py
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lines I ran:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

python3 server.py 51966 # 51,966=0xCAFE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

python3 client.py localhost 51966
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Screenshot of the execution:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename q2.4Results.png
	scale 20

\end_inset


\end_layout

\begin_layout Subsection
Socket APIs
\end_layout

\begin_layout Enumerate
bind - Binds a socket to a an address and port.
 I used it after creating the socket before I started listening in 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

server.py
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
listen - Starts listening to the bound port.
 The OS will do handshakes and complete init of connections after this line.
 I used it after binding the port.
 I used it after I used the bind in 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

server.py
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
connect - Sends a syn request to a server to the given hostname and port.
 I used it to initiate a connection between my 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

client.py
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
accept - Getting a connection from the OS.
 I used it to accept a connection from a specific user (in a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

while
\end_layout

\end_inset

 loop) in my 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

server.py
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
send - Sends data over an open connection.
 I used it (actually it was 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sendall
\end_layout

\end_inset

) to send data to the other side of the connection.
 Both in the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

server.py
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

client.py
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
recv - Receives data over an open connection.
 I used it in the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

client.py
\end_layout

\end_inset

 to read the response from the server.
 In the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

server.py
\end_layout

\end_inset

 I didn't use it because I don't care that my users have to say.
\end_layout

\begin_layout Section
Social Engineering
\end_layout

\begin_layout Subsection
Give example from daily life
\end_layout

\begin_layout Standard
In the supermarket the necessities are located at the end of the store.
 Thus forcing customers to go through aisles that might attract them to
 buy a few more things.
\end_layout

\begin_layout Subsection
What is social engineering in InfoSec sense
\end_layout

\begin_layout Standard
Social Engineering (from now and on SE) in the computer security world is
 using the human factor as the weakest link in the chain to get compromising
 information to a system.
 A few examples are calling/email someone pretending to be the bank and
 request login credentials.
 Or maybe call a company sales department pretending you're a technician
 that was sent to help them.
\end_layout

\begin_layout Subsection
What did the government do to protect from the virus
\end_layout

\begin_layout Standard
I'm assuming the questions aims for decommission the email systems but that
 doesn't really protect from the virus same way suicide doesn't heal cancer.
\end_layout

\begin_layout Standard
I assume in reality they had to educate their employees not to trust every
 email they get and additionally, they probably blocked sending executables
 by emails and added the signature of the virus to the EDR they used (I
 think even then EDR were used).
\end_layout

\begin_layout Subsection
How was Paris Hilton's phone info leaked
\end_layout

\begin_layout Standard
In short:
\end_layout

\begin_layout Enumerate
A teenager called AT&T's sales and pretended to be a technician that should
 help with slowness and thus got credentials to log in as a company user.
\end_layout

\begin_layout Enumerate
Then find Paris Hilton's phone number and seeing she has a sophisticated
 device (which can potentially hold photos, videos and so on)
\end_layout

\begin_layout Enumerate
Using public information (ad Paris published) guess the answer to the 
\begin_inset Quotes eld
\end_inset

security
\begin_inset Quotes erd
\end_inset

 question and reset the password
\end_layout

\begin_layout Enumerate
Enter Paris Hilton's account and copy any information that seems 
\begin_inset Quotes eld
\end_inset

interesting
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
What was Paris Hilton's mistake and how could she have prevented the attack
\end_layout

\begin_layout Standard
Paris chose a question that was very easy to know the answer for a famous
 personality.
 
\end_layout

\begin_layout Standard
She could have chosen a less publicly known security question.
\end_layout

\begin_layout Standard
If you aim for not publishing the ad about the missing dog, I disagree that
 she should've avoided that.
 Even without it, a name of something favorite of yours is hardly a 
\begin_inset Quotes eld
\end_inset

security
\begin_inset Quotes erd
\end_inset

 measure.
\end_layout

\begin_layout Subsection
What is the additional power of SE in digital comm
\end_layout

\begin_layout Standard
In digital comm, SE attacks are much easier to yield crops because humans
 are more experienced detecting someone lying using visual clues (age, badge,
 uniform, etc...).
 When someone is on the phone it's much harder to know who they are (and
 that's without even using voice changers).
\end_layout

\begin_layout Standard
In the previous sections the hacker used the fact that the sales person
 doesn't see a 17 yo teenager in front of him and can only hear his voice.
\end_layout

\begin_layout Subsection
What are Phishing attacks
\end_layout

\begin_layout Standard
Phishing attacks are attacks meant to retrieve information but trickery
 of a person (type of SE).
 Often appear as a disguised email from the bank or work trying to get a
 victim to enter credentials into a malicious website (this is one example).
 Sometimes a series of phishing attacks can be used to piece together a
 load of information that can be used for whatever (blackmail, threaten,
 get money, etc...).
 Phishing attacks can be sent to a big mailing list using the
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang hebrew
שיטת המצליח
\lang english
.
\end_layout

\begin_layout Standard
Spear Phishing is a type of Phishing where a specific target is chosen (usually
 some public figure or someone with power over something or someone else).
\end_layout

\begin_layout Subsection
How someone with access to a bank account can transfer funds to themselves
\end_layout

\begin_layout Enumerate
Log in as themselves
\end_layout

\begin_layout Enumerate
Buy a bunch of penny stocks (ideally much in advance as to prevent suspicion)
\end_layout

\begin_layout Enumerate
Log in as the victim
\end_layout

\begin_layout Enumerate
Buy as much stocks as possible from that penny stock driving the price of
 the stock up
\end_layout

\begin_layout Enumerate
Log in as themselves and sell all the bought stocks
\end_layout

\begin_layout Enumerate
Profit!
\end_layout

\begin_layout Standard
Now the attacker simply seems like a person who sold the stocks when they
 yielded profit without drawing suspicion.
\end_layout

\begin_layout Subsection
What is the main reason SE attacks can be more effective where directly
 digital attacks fail
\end_layout

\begin_layout Standard
SE attacks relies can be more effective because it's much harder to immune
 the human factor, it's not like we can send a security patch to employees'
 brains (yet).
 It's usually easy to immune all systems at once while a new employee can
 be so much more susceptible to trickery simply due to the facts that they
 need to get experience in the jobs and not everything is known.
\end_layout

\begin_layout Subsection
What are the ways to prevent SE attacks
\end_layout

\begin_layout Standard
Education and exposure.
 It's most effective to show employees of a company what the attacks look
 like and educate them on how to detect clues that indicate it's an SE attack.
\end_layout

\end_body
\end_document
